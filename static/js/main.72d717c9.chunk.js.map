{"version":3,"sources":["test.js","Components/NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","comment","c","document","createComment","b","a","body","insertBefore","firstChild","consola","hex","codePointAt","toString","emo","String","fromCodePoint","waves","i","console","log","Home","About","NavBar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","exact","path","window","addEventListener","hidden","x","greetings","y","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8GAiDAA,EAAOC,QAAQC,QAjDf,WAII,IAAIC,EAAIC,SAASC,cAAc,sEAC3BC,EAAIF,SAASC,cAAc,sEAC3BE,EAAIH,SAASC,cAAc,yEAC/BD,SAASI,KAAKC,aAAaF,EAAGH,SAASI,KAAKE,YAC5CN,SAASI,KAAKC,aAAaH,EAAGF,SAASI,KAAKE,YAC5CN,SAASI,KAAKC,aAAaN,EAAGC,SAASI,KAAKE,aA0ChDV,EAAOC,QAAQU,QAlCf,WACI,IAAIC,EAAM,eAAKC,YAAY,GAAGC,SAAS,IACnCC,EAAMC,OAAOC,cAAc,KAAKL,GAE7BM,EAAQF,OAAOC,cAAc,QAE7BE,EAAIH,OAAOC,cAAc,QAIpCG,QAAQC,IAAKN,EAAMG,GAGfE,QAAQC,IAAI,iBAAkBF,EAAI,yCAGlCC,QAAQC,IAAI,0IACZD,QAAQC,IAAI,4C,wNC0DhB,SAASC,IACL,OACI,6BACI,qCAKZ,SAASC,IACL,OACI,6BACI,sCAUGC,MAhGf,WAEI,OAGI,kBAAC,IAAD,KAGI,yBAAKC,UAAU,iDACX,uBAAGA,UAAU,eAAgBC,KAAK,KAAlC,UACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACxJ,0BAAMP,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BQ,GAAG,aACzC,wBAAIR,UAAU,cACV,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,KAA9B,SAEJ,wBAAIT,UAAU,YACV,kBAAC,IAAD,CAAMA,UAAU,WAAWS,GAAG,UAA9B,aAQhB,6BAaA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KACd,kBAACd,EAAD,OAEJ,kBAAC,IAAD,CAAOc,KAAK,UACR,kBAACb,EAAD,UCjDpBc,OAAOC,iBAAiB,oBAAoB,WAEzClC,SAASmC,OAEVnB,QAAQC,IAAI,iBAIZD,QAAQC,IAAI,qBAMdmB,IAAEC,YACFC,IAAExC,UACFwC,IAAE/B,UA2BagC,MA1Bf,WAEE,OAoBC,kBAAC,EAAD,OCxCGC,EAAcC,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1B1C,QAAQC,IACN,iHAKE8B,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlBpC,QAAQC,IAAI,sCAGR8B,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACL9C,QAAQ8C,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjE,SAASkE,eAAe,SDYnB,SAAkBnB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,qBAAwBnC,OAAOS,SAASpB,MACpD+C,SAAWpC,OAAOS,SAAS2B,OAIvC,OAGFpC,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMY,EAAK,UAAMsB,qBAAN,sBAEP5B,IAgEV,SAAiCM,EAAOC,GAEtCuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BlB,OAAOS,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACL7C,QAAQC,IACN,oEAvFA+D,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjCnC,QAAQC,IACN,iHAMJ4B,EAAgBC,EAAOC,OChC/BE,K","file":"static/js/main.72d717c9.chunk.js","sourcesContent":["function comment(){\r\n\r\n   \r\n\r\n    var c = document.createComment(\"    When I wrote this, only God and I understood what I was doing,\");\r\n    var b = document.createComment(\"    Now, God only knows                                           \");\r\n    var a = document.createComment(\"    - Jo√£o Gomes : https://joaosilgo.github.io/joaogomes/         \");\r\n    document.body.insertBefore(a, document.body.firstChild);\r\n    document.body.insertBefore(b, document.body.firstChild);\r\n    document.body.insertBefore(c, document.body.firstChild);\r\n\r\n\r\n\r\n\r\n} \r\n\r\n\r\nfunction consola(){\r\n    let hex = \"üî∞\".codePointAt(0).toString(16);\r\n    let emo = String.fromCodePoint(\"0x\"+hex);\r\n    \r\n    const  waves = String.fromCodePoint(0x1F44B);\r\n\r\n    const  i = String.fromCodePoint(0x1F604);\r\n\r\n    \r\n\r\nconsole.log( emo , waves);\r\n    \r\n\r\n    console.log('%cHello World!'+ i , 'color: darkseagreen; font-size: 30px;');\r\n\r\n\r\n    console.log(' ‚ÄúOnce more into the fray, into the last good fight I‚Äôll ever know. Live and die on this day, live and die on this day‚Äù');\r\n    console.log('https://joaosilgo.github.io/joaogomes/');\r\n    \r\n/**\r\n* For the brave souls who get this far: You are the chosen ones,\r\n* the valiant knights of programming who toil away, without rest,\r\n* fixing our most awful code. To you, true saviors, kings of men,\r\n* I say this: never gonna give you up, never gonna let you down,\r\n* never gonna run around and desert you. Never gonna make you cry,\r\n* never gonna say goodbye. Never gonna tell a lie and hurt you.\r\n*/\r\n\r\n}\r\n\r\n\r\n\r\nmodule.exports.comment = comment;\r\n\r\nmodule.exports.consola = consola;","\r\n\r\n\r\nimport React from 'react';\r\n//import React, { Component } from 'react';\r\n//import logo from '../logo.svg';\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n\r\n\r\n\r\nfunction NavBar() {\r\n\r\n    return (\r\n\r\n\r\n        <Router>\r\n\r\n\r\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a className=\"navbar-brand\"  href=\"/\"  >Navbar</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul className=\"navbar-nav\">\r\n                        <li className=\"nav-item active\">\r\n                            <Link className=\"nav-link\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">About</Link>\r\n                        </li>\r\n\r\n\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <hr />\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n                <Route path=\"/about\">\r\n                    <About />\r\n                </Route>\r\n\r\n            </Switch>\r\n\r\n\r\n\r\n        </Router>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <h2>Home</h2>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction About() {\r\n    return (\r\n        <div>\r\n            <h2>About</h2>\r\n            \r\n        </div>\r\n\r\n        \r\n    );\r\n}\r\n\r\n\r\n\r\nexport default NavBar;","import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport x from 'john-package';\nimport y from './test.js';\n//import Navbar from 'react-bootstrap/Navbar';\n//import 'bootstrap/dist/css/bootstrap.min.css';\n\nimport NavBar from './Components/NavBar.js';\n\n\n\n\nwindow.addEventListener('visibilitychange', () => {\n\nif(document.hidden){\n\n  console.log('Tab is Hidden');\n}\nelse\n{\n  console.log('Tab is Focused');\n}\n\n})\n\n\nx.greetings();\ny.comment();\ny.consola();\nfunction App() {\n\n  return (\n   /*\n    <div className=\"App\">\n     \n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n    */\n   <NavBar />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n\nserviceWorker.register();\n"],"sourceRoot":""}